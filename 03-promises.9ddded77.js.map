{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA0CA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhDQO,SAASC,cAAc,SAC/BC,iBAAiB,UAE9B,SAAsBC,GACpBA,EAAMC,iBACN,MACEC,UAAUZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,IACvBJ,EAAMK,cAEVC,QAAQC,IAAI,UAAUjB,EAAMkB,gBAAgBL,EAAKK,kBAAkBJ,EAAOI,SAC1E,MAAMC,EAAUC,OAAON,EAAOI,OACxBG,EAAQD,OAAOP,EAAKK,OACpBI,EAASF,OAAOpB,EAAMkB,QAO9B,SAAsBJ,EAAQD,EAAMU,GAClC,IAAIC,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,GAAKX,EAAQW,IAEzBD,GADQ,IAANC,EACSF,EAGAV,EAEbf,EAAc2B,EAAGD,GACdE,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA+B,OAAOC,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEhE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA+B,OAAOG,QAAQ,sBAAoB/B,QAAeC,MAAU,G,CAnBlE+B,CAAaZ,EAASE,EAAOC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport '../css/common.css';\n\nconst promisesForm = document.querySelector('.form');\npromisesForm.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n  const amountP = Number(amount.value);\n  const stepP = Number(step.value);\n  const delayP = Number(delay.value);\n\n  makePromises(amountP, stepP, delayP);  \n\n  // event.currentTarget.reset();\n}\n\nfunction makePromises(amount, step, delay) {\n  let counter = 0\n  for (let i = 1; i <= amount; i++) {\n    if (i === 1) {\n      counter += delay\n    }\n    else {\n      counter += step\n    }\n    createPromise(i, counter)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      });\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","elements","step","amount","currentTarget","console","log","value","amountP","Number","stepP","delayP","delay1","counter","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$makePromises"],"version":3,"file":"03-promises.9ddded77.js.map"}